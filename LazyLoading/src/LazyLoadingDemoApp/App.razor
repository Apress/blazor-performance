@using System.Reflection

@inject Microsoft.AspNetCore.Components.WebAssembly.Services.LazyAssemblyLoader lazyAssemblyLoader;

<Router AppAssembly="@typeof(Program).Assembly"
     AdditionalAssemblies="@additionalAssemblies"
     OnNavigateAsync="@OnNavigateAsync">
    <Found Context="routeData">
        <RouteView RouteData="@routeData" DefaultLayout="@typeof(MainLayout)" />
    </Found>
    <NotFound>
        <LayoutView Layout="@typeof(MainLayout)">
            <p>Sorry, there's nothing at this address.</p>
        </LayoutView>
    </NotFound>
</Router>

@code {
  private List<Assembly> additionalAssemblies = new List<Assembly> {
    
  };

  private async Task OnNavigateAsync(NavigationContext ctxt) {

    if( ctxt.Path == "lazy-dog" || ctxt.Path == "fetchdata" ) {
      var assemblies = await lazyAssemblyLoader.LoadAssembliesAsync(new[] { 
        "LazyLoadingComponents.dll",
        "ServiceProxies.dll"
      });
      additionalAssemblies.AddRange(assemblies);
      
    }

  }
}